import {describe, it} from 'mocha';
import assert from 'assert';
import * as fs from 'fs';
import {
  ValidPr,
  checkFilePathsMatch,
  getChangedFiles,
  checkPRAgainstConfig,
} from '../src/check-pr';
import nock from 'nock';
import {resolve} from 'path';
import yaml from 'js-yaml';

const {Octokit} = require('@octokit/rest');

const octokit = new Octokit({
  auth: 'mypersonalaccesstoken123',
});

function listChangedFilesPR(status: number, response: {filename: string}[]) {
  return nock('https://api.github.com')
    .get('/repos/owner/repo/pulls/1/files')
    .reply(status, response);
}

describe('check pr against config', async () => {
  describe('checks that files match at least one of the patterns', () => {
    it('should return true if the file list is empty', () => {
      const prFiles = [
        'packages/spell-check/a.js',
        'packages/spell-check/b.js',
      ];
      const validPr: ValidPr = {
        author: 'yoshi-bot@',
        title: 'chore: autogenerated yadayada',
      };
      assert.ok(checkFilePathsMatch(prFiles, validPr));
    });
    it('should return true if each file matches at least one of the patterns', () => {
      const prFiles = [
        'packages/spell-check/package.json',
        'packages/spell-check/CHANGELOG.md',
      ];
      const validPr: ValidPr = {
        author: 'yoshi-bot@',
        title: 'chore: autogenerated yadayada',
        changedFiles: ['package.json$', 'CHANGELOG.md$'],
      };
      assert.ok(checkFilePathsMatch(prFiles, validPr));
    });

    it('should return false if one file matches does not match any of the patterns', () => {
      const prFiles = [
        'packages/spell-check/package.json',
        'packages/spell-check/CHANGELOG',
      ];
      const validPr: ValidPr = {
        author: 'yoshi-bot@',
        title: 'chore: autogenerated yadayada',
        changedFiles: ['package.json$', 'CHANGELOG.md$'],
      };
      assert.strictEqual(checkFilePathsMatch(prFiles, validPr), false);
    });

    it('should return false if no files match any patterns', () => {
      const prFiles = [
        'packages/spell-check/anythingElse',
        'packages/spell-check/CHANGELOG',
      ];
      const validPr: ValidPr = {
        author: 'yoshi-bot@',
        title: 'chore: autogenerated yadayada',
        changedFiles: ['package.json$', 'CHANGELOG.md$'],
      };
      assert.strictEqual(checkFilePathsMatch(prFiles, validPr), false);
    });
  });

  describe('returns names of files that were changed', async () => {
    it('should fetch the names of the files changed of PR', async () => {
      const scopes = listChangedFilesPR(200, [
        {filename: 'changedFile1'},
        {filename: 'changedFile2'},
      ]);
      const files = await getChangedFiles(octokit, 'owner', 'repo', 1);
      scopes.done();
      assert.deepStrictEqual(files, ['changedFile1', 'changedFile2']);
    });
  });

  describe('main pr functioning', async () => {
    const fixturesPath = resolve(__dirname, '../../test/fixtures');
    const validPR = yaml.load(
      fs.readFileSync(
        resolve(fixturesPath, 'config', 'valid-schemas', 'valid-schema1.yml'),
        'utf8'
      )
    ) as {rules: ValidPr[]};

    console.log(validPR);

    it('should fail if PR does not match the validPRConfig', async () => {
      const pr = require(resolve(
        fixturesPath,
        'events',
        'pull_request_opened'
      ));

      const prMatchesConfig = await checkPRAgainstConfig(validPR, pr, octokit);
      assert.strictEqual(prMatchesConfig, false);
    });
  });
});
